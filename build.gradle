import dev.ithundxr.silk.ChangelogText

plugins {
    id "architectury-plugin" version "3.4-SNAPSHOT"
    id "dev.architectury.loom" version "1.6-SNAPSHOT" apply false
    id "io.github.p03w.machete" version "1.+" // automatic jar compressing on build
    id "dev.ithundxr.silk" version "0.11.16"
    id "me.modmuss50.mod-publish-plugin" version "0.6.3"
}

architectury {
    minecraft = rootProject.minecraft_version
}

subprojects {
    apply plugin: "dev.architectury.loom"

    loom {
        silentMojangMappingsLicense()

        runs.configureEach {
            vmArg("-Dmixin.env.remapRefMap=true")
            vmArg("-Dmixin.env.refMapRemappingFile=${projectDir}/build/createSrgToMcp/output.srg")
        }
    }


    repositories {
        mavenCentral()
        maven { url = "https://maven.shedaniel.me/" } // Cloth Config, REI
        maven { url = "https://maven.blamejared.com/" } // JEI
        maven { url = "https://maven.parchmentmc.org" } // Parchment mappings
        maven { url = "https://maven.quiltmc.org/repository/release" } // Quilt Mappings
        maven { // Flywheel
            url = "https://maven.tterrag.com/"
            content {
                // need to be specific here due to version overlaps
                includeGroup("com.jozufozu.flywheel")
            }
        }
    }

    dependencies {
        minecraft "com.mojang:minecraft:${minecraft_version}"
        // layered mappings - Mojmap names, parchment and QM docs and parameters
        mappings(loom.layered {
            it.mappings("org.quiltmc:quilt-mappings:${minecraft_version}+build.${qm_version}:intermediary-v2")
            it.parchment("org.parchmentmc.data:parchment-${minecraft_version}:${parchment_version}@zip")
            it.officialMojangMappings { nameSyntheticMembers = false }
        })

        // see each subproject for dependencies.
    }
}

allprojects {
    apply plugin: "java"
    apply plugin: "architectury-plugin"
    apply plugin: "maven-publish"

    archivesBaseName = rootProject.archives_base_name
    group = rootProject.maven_group

    Boolean isRelease = System.getenv("RELEASE_BUILD")?.toBoolean() ?: false

    // Formats the mod version to include the loader and Minecraft version
    // example: 0.5+fabric-mc1.20.1
    String buildNumber = System.getenv("GITHUB_RUN_NUMBER")
    version = "${mod_version}+${project.name}-mc${minecraft_version}" + (buildNumber != null && !isRelease ? "-${buildNumber}" : "")

    repositories {
        // Add repositories to retrieve artifacts from in here.
        // You should only use this when depending on other mods because
        // Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
        // See https://docs.gradle.org/current/userguide/declaring_repositories.html
        // for more information about repositories.
    }

    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
    }

    java {
        withSourcesJar()
    }

    machete {
        // disable machete locally for faster builds
        enabled = buildNumber != null || isRelease
    }

}

String platform = System.getenv("PLATFORM")
tasks.register("blazinghotPublish") {
    if (platform == "both") {
        dependsOn(tasks.build, ":publishMods", ":fabric:publishMods", ":forge:publishMods")
    } else if (platform == "forge" || platform == "fabric") {
        dependsOn("${platform}:build", ":publishMods", "${platform}:publishMods")
    } else throw new NullPointerException("Invalid platform: " + platform)
}

publishMods {
    String uncutChangelogText = ChangelogText.getChangelogText(rootProject).toString()
    String cutChangelogText = uncutChangelogText.startsWith("Create:") ? uncutChangelogText.split(":", 3)[2] : uncutChangelogText.split(":", 2)[1]
    String changelogText = release_type.equalsIgnoreCase("beta") || release_type.equalsIgnoreCase("alpha") ? "Pre-release version. Back up your worlds before updating.  " + cutChangelogText : cutChangelogText

    changelog = changelogText
    displayName = "Create: Blazing Hot v${mod_version} for mc${minecraft_version}"
    type = release_type.equalsIgnoreCase("alpha") ? ALPHA : STABLE // TODO: re-add beta check after 1.0 release

    github {
        accessToken = System.getenv("GITHUB_TOKEN")
        repository = "dudek26/Create-Blazing-Hot"
        commitish = "${minecraft_version}/multiloader"
        tagName = "v${mod_version}"

        // Allow the release to be initially created without any files.
        allowEmptyFiles = true
    }
}
